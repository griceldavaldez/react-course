{"ast":null,"code":"/*\nFetch API\n\nLa API Fetch proporciona una interfaz para recuperar recursos (incluso a través de la red). \nResultará familiar a cualquiera que haya usado XMLHttpRequest, pero la nueva API ofrece un \nconjunto de características más potente y flexible. \n*/\n\nconst apiKey = 'XB8b3WmsNgShqhhOkTRVgnX5ly2jZmQG';\nconst peticion = fetch(`https://api.giphy.com/v1/gifs/random?api_key=${apiKey}`);\n\n/*peticion.then(resp => {\n    //console.log(resp)\n    resp.json().then(data => {\n        console.log(data)\n    })\n})\n.catch(console.warn);*/\n\n//las promesas pueden encadenarse tambien\n/*peticion\n    .then(resp => resp.json()) //esto retorna una promesa (la respuesta del endpoint)\n    .then(data => console.log(data.data)) //lo anterior se pasa a este then\n    .catch(console.warn);*/\n\n//aqui usamos la desestructuracion para obtener la data\npeticion.then(resp => resp.json()).then(_ref => {\n  let {\n    data\n  } = _ref;\n  console.log(data.images.original.url); //estas son las propiedades del json que retorna el endpoint\n  const {\n    url\n  } = data.images.original;\n  const img = document.createElement('img');\n  img.src = url;\n  document.body.append(img);\n}).catch(console.warn);","map":{"version":3,"names":["apiKey","peticion","fetch","then","resp","json","_ref","data","console","log","images","original","url","img","document","createElement","src","body","append","catch","warn"],"sources":["/home/gvaldez/repositorios/React/02-intro-javascript/src/index.js"],"sourcesContent":["/*\nFetch API\n\nLa API Fetch proporciona una interfaz para recuperar recursos (incluso a través de la red). \nResultará familiar a cualquiera que haya usado XMLHttpRequest, pero la nueva API ofrece un \nconjunto de características más potente y flexible. \n*/\n\nconst apiKey = 'XB8b3WmsNgShqhhOkTRVgnX5ly2jZmQG';\n\nconst peticion = fetch(`https://api.giphy.com/v1/gifs/random?api_key=${apiKey}`);\n\n/*peticion.then(resp => {\n    //console.log(resp)\n    resp.json().then(data => {\n        console.log(data)\n    })\n})\n.catch(console.warn);*/ \n\n//las promesas pueden encadenarse tambien\n/*peticion\n    .then(resp => resp.json()) //esto retorna una promesa (la respuesta del endpoint)\n    .then(data => console.log(data.data)) //lo anterior se pasa a este then\n    .catch(console.warn);*/\n\n//aqui usamos la desestructuracion para obtener la data\npeticion\n    .then(resp => resp.json())\n    .then(({data}) => {\n        console.log(data.images.original.url) //estas son las propiedades del json que retorna el endpoint\n        const {url} = data.images.original;\n        const img = document.createElement('img');\n        img.src = url;\n        document.body.append(img);\n    })\n    .catch(console.warn);"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,MAAM,GAAG,kCAAkC;AAEjD,MAAMC,QAAQ,GAAGC,KAAK,CAAE,gDAA+CF,MAAO,EAAC,CAAC;;AAEhF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACAC,QAAQ,CACHE,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAACG,IAAA,IAAY;EAAA,IAAX;IAACC;EAAI,CAAC,GAAAD,IAAA;EACTE,OAAO,CAACC,GAAG,CAACF,IAAI,CAACG,MAAM,CAACC,QAAQ,CAACC,GAAG,CAAC,EAAC;EACtC,MAAM;IAACA;EAAG,CAAC,GAAGL,IAAI,CAACG,MAAM,CAACC,QAAQ;EAClC,MAAME,GAAG,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;EACzCF,GAAG,CAACG,GAAG,GAAGJ,GAAG;EACbE,QAAQ,CAACG,IAAI,CAACC,MAAM,CAACL,GAAG,CAAC;AAC7B,CAAC,CAAC,CACDM,KAAK,CAACX,OAAO,CAACY,IAAI,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}